    B3 B2 B1 B0
&   0  1  0  0
---------------
    0  B2 0  0
    
    B3 B2 B1 B0
&   1  1  0  1
---------------
    B3 B2 0  B0
    
    0100
    ~0100 -> 1011
    0100^0001 -> 0101
    0101^0001 -> 0101
    
Clearing Bits
    bits &= (1<<7); /*clears bit 7*/
    
    (1<<7) -> 10000000
    ~(1<<7) -> 01111111

Bitwise and (&)
    1) Test the value of a single bit
    2) Force a single bit to 0
    
Bitwise OR (|)
    1) Force a single bit to a 1
    
Bitwise Exclusive OR (^)
    1) Change a single bit
    
Extracting Bits
    Time:
        1111 1000 0001 1111
         F    8    F    F
        newtime = oldtime & 0xF*1F
        
Inserting Bits
    
    
Structures {
    char gender;
    int age;
    float height;

} person;

person.age=17;

Packed Structures
    with #pragma
        packed to conserve memory, sacrifices performance
        [/  /  c b4]
        [b3 b2 b1 a]
        
    without #pragmas
        sacrifices memory to maximize performance


Arrays and subscripts
    a[k] == *(a+k) == *(k+a) == k[a]
    int a[100];
    int *p;
    p=a; == p=&a[0];

